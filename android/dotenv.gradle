import java.util.regex.Matcher
import java.util.regex.Pattern

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern;

    if( tskReqStr.contains( "assemble" ) )
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher( tskReqStr )

    if( matcher.find() ) {
        println matcher.group(1).toLowerCase()
        return matcher.group(1).toLowerCase()
    }
    else
    {
        println "NO MATCH FOUND"
        return "";
    }
}

def readDotEnv = {

    def envFile = ".env"
    println("test2")

    if (System.env['ENVFILE']) {
        println("test3")

        envFile = System.env['ENVFILE'];
        println("test4")

    } else if (project.hasProperty("envConfigFiles")) {
        println("*********************** ENV File found****************************"+getCurrentFlavor())
        def possibleFile = project.envConfigFiles.get(getCurrentFlavor())
        println("---------"+envFile+" ---------"+possibleFile)
        if (possibleFile) {
            envFile = possibleFile;
        }
    }

    def env = [:]
    println("Reading env from: $envFile")
    try {
        new File("$project.rootDir/../$envFile").eachLine { line ->
            def matcher = (line =~ /^\s*([\w\d\.\-_]+)\s*=\s*(.*)?\s*$/)
            if (matcher.getCount() == 1 && matcher[0].size() == 3){
                env.put(matcher[0][1], matcher[0][2])
            }
        }
    } catch (FileNotFoundException ex) {
        println("**************************")
        println("*** Missing .env file ****")
        println("**************************")
    }
    project.ext.set("env", env)
}

//getCurrentFlavor()
readDotEnv()

android {
    defaultConfig {
        project.env.each { k, v ->
            def escaped = v.replaceAll("%","\\\\u0025")
            buildConfigField "String", k, "\"$v\""
            resValue "string", k, "\"$escaped\""
        }
    }
}
